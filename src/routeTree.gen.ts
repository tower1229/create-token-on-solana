/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as XImport } from './routes/x'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardWalletImport } from './routes/dashboard.wallet'
import { Route as DashboardTaskImport } from './routes/dashboard.task'
import { Route as DashboardRuleImport } from './routes/dashboard.rule'
import { Route as DashboardTaskCreateImport } from './routes/dashboard.task_.create'
import { Route as DashboardRuleCreateImport } from './routes/dashboard.rule_.create'
import { Route as DashboardRulePostIdImport } from './routes/dashboard.rule_.$postId'
import { Route as DashboardTaskTaskIdTransactionImport } from './routes/dashboard.task_.$taskId.transaction'
import { Route as DashboardTaskTaskIdResultImport } from './routes/dashboard.task_.$taskId.result'

// Create/Update Routes

const XRoute = XImport.update({
  id: '/x',
  path: '/x',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardWalletRoute = DashboardWalletImport.update({
  id: '/wallet',
  path: '/wallet',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardTaskRoute = DashboardTaskImport.update({
  id: '/task',
  path: '/task',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardRuleRoute = DashboardRuleImport.update({
  id: '/rule',
  path: '/rule',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardTaskCreateRoute = DashboardTaskCreateImport.update({
  id: '/task_/create',
  path: '/task/create',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardRuleCreateRoute = DashboardRuleCreateImport.update({
  id: '/rule_/create',
  path: '/rule/create',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardRulePostIdRoute = DashboardRulePostIdImport.update({
  id: '/rule_/$postId',
  path: '/rule/$postId',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardTaskTaskIdTransactionRoute =
  DashboardTaskTaskIdTransactionImport.update({
    id: '/task_/$taskId/transaction',
    path: '/task/$taskId/transaction',
    getParentRoute: () => DashboardRoute,
  } as any)

const DashboardTaskTaskIdResultRoute = DashboardTaskTaskIdResultImport.update({
  id: '/task_/$taskId/result',
  path: '/task/$taskId/result',
  getParentRoute: () => DashboardRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/x': {
      id: '/x'
      path: '/x'
      fullPath: '/x'
      preLoaderRoute: typeof XImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/rule': {
      id: '/dashboard/rule'
      path: '/rule'
      fullPath: '/dashboard/rule'
      preLoaderRoute: typeof DashboardRuleImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/task': {
      id: '/dashboard/task'
      path: '/task'
      fullPath: '/dashboard/task'
      preLoaderRoute: typeof DashboardTaskImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/wallet': {
      id: '/dashboard/wallet'
      path: '/wallet'
      fullPath: '/dashboard/wallet'
      preLoaderRoute: typeof DashboardWalletImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/rule_/$postId': {
      id: '/dashboard/rule_/$postId'
      path: '/rule/$postId'
      fullPath: '/dashboard/rule/$postId'
      preLoaderRoute: typeof DashboardRulePostIdImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/rule_/create': {
      id: '/dashboard/rule_/create'
      path: '/rule/create'
      fullPath: '/dashboard/rule/create'
      preLoaderRoute: typeof DashboardRuleCreateImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/task_/create': {
      id: '/dashboard/task_/create'
      path: '/task/create'
      fullPath: '/dashboard/task/create'
      preLoaderRoute: typeof DashboardTaskCreateImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/task_/$taskId/result': {
      id: '/dashboard/task_/$taskId/result'
      path: '/task/$taskId/result'
      fullPath: '/dashboard/task/$taskId/result'
      preLoaderRoute: typeof DashboardTaskTaskIdResultImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/task_/$taskId/transaction': {
      id: '/dashboard/task_/$taskId/transaction'
      path: '/task/$taskId/transaction'
      fullPath: '/dashboard/task/$taskId/transaction'
      preLoaderRoute: typeof DashboardTaskTaskIdTransactionImport
      parentRoute: typeof DashboardImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteChildren {
  DashboardRuleRoute: typeof DashboardRuleRoute
  DashboardTaskRoute: typeof DashboardTaskRoute
  DashboardWalletRoute: typeof DashboardWalletRoute
  DashboardRulePostIdRoute: typeof DashboardRulePostIdRoute
  DashboardRuleCreateRoute: typeof DashboardRuleCreateRoute
  DashboardTaskCreateRoute: typeof DashboardTaskCreateRoute
  DashboardTaskTaskIdResultRoute: typeof DashboardTaskTaskIdResultRoute
  DashboardTaskTaskIdTransactionRoute: typeof DashboardTaskTaskIdTransactionRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardRuleRoute: DashboardRuleRoute,
  DashboardTaskRoute: DashboardTaskRoute,
  DashboardWalletRoute: DashboardWalletRoute,
  DashboardRulePostIdRoute: DashboardRulePostIdRoute,
  DashboardRuleCreateRoute: DashboardRuleCreateRoute,
  DashboardTaskCreateRoute: DashboardTaskCreateRoute,
  DashboardTaskTaskIdResultRoute: DashboardTaskTaskIdResultRoute,
  DashboardTaskTaskIdTransactionRoute: DashboardTaskTaskIdTransactionRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/x': typeof XRoute
  '/dashboard/rule': typeof DashboardRuleRoute
  '/dashboard/task': typeof DashboardTaskRoute
  '/dashboard/wallet': typeof DashboardWalletRoute
  '/dashboard/rule/$postId': typeof DashboardRulePostIdRoute
  '/dashboard/rule/create': typeof DashboardRuleCreateRoute
  '/dashboard/task/create': typeof DashboardTaskCreateRoute
  '/dashboard/task/$taskId/result': typeof DashboardTaskTaskIdResultRoute
  '/dashboard/task/$taskId/transaction': typeof DashboardTaskTaskIdTransactionRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/x': typeof XRoute
  '/dashboard/rule': typeof DashboardRuleRoute
  '/dashboard/task': typeof DashboardTaskRoute
  '/dashboard/wallet': typeof DashboardWalletRoute
  '/dashboard/rule/$postId': typeof DashboardRulePostIdRoute
  '/dashboard/rule/create': typeof DashboardRuleCreateRoute
  '/dashboard/task/create': typeof DashboardTaskCreateRoute
  '/dashboard/task/$taskId/result': typeof DashboardTaskTaskIdResultRoute
  '/dashboard/task/$taskId/transaction': typeof DashboardTaskTaskIdTransactionRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/x': typeof XRoute
  '/dashboard/rule': typeof DashboardRuleRoute
  '/dashboard/task': typeof DashboardTaskRoute
  '/dashboard/wallet': typeof DashboardWalletRoute
  '/dashboard/rule_/$postId': typeof DashboardRulePostIdRoute
  '/dashboard/rule_/create': typeof DashboardRuleCreateRoute
  '/dashboard/task_/create': typeof DashboardTaskCreateRoute
  '/dashboard/task_/$taskId/result': typeof DashboardTaskTaskIdResultRoute
  '/dashboard/task_/$taskId/transaction': typeof DashboardTaskTaskIdTransactionRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/x'
    | '/dashboard/rule'
    | '/dashboard/task'
    | '/dashboard/wallet'
    | '/dashboard/rule/$postId'
    | '/dashboard/rule/create'
    | '/dashboard/task/create'
    | '/dashboard/task/$taskId/result'
    | '/dashboard/task/$taskId/transaction'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/x'
    | '/dashboard/rule'
    | '/dashboard/task'
    | '/dashboard/wallet'
    | '/dashboard/rule/$postId'
    | '/dashboard/rule/create'
    | '/dashboard/task/create'
    | '/dashboard/task/$taskId/result'
    | '/dashboard/task/$taskId/transaction'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/x'
    | '/dashboard/rule'
    | '/dashboard/task'
    | '/dashboard/wallet'
    | '/dashboard/rule_/$postId'
    | '/dashboard/rule_/create'
    | '/dashboard/task_/create'
    | '/dashboard/task_/$taskId/result'
    | '/dashboard/task_/$taskId/transaction'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  XRoute: typeof XRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
  XRoute: XRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/x"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx",
      "children": [
        "/dashboard/rule",
        "/dashboard/task",
        "/dashboard/wallet",
        "/dashboard/rule_/$postId",
        "/dashboard/rule_/create",
        "/dashboard/task_/create",
        "/dashboard/task_/$taskId/result",
        "/dashboard/task_/$taskId/transaction"
      ]
    },
    "/x": {
      "filePath": "x.tsx"
    },
    "/dashboard/rule": {
      "filePath": "dashboard.rule.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/task": {
      "filePath": "dashboard.task.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/wallet": {
      "filePath": "dashboard.wallet.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/rule_/$postId": {
      "filePath": "dashboard.rule_.$postId.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/rule_/create": {
      "filePath": "dashboard.rule_.create.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/task_/create": {
      "filePath": "dashboard.task_.create.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/task_/$taskId/result": {
      "filePath": "dashboard.task_.$taskId.result.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/task_/$taskId/transaction": {
      "filePath": "dashboard.task_.$taskId.transaction.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
